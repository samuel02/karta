quit
klass_name.to_s
klass_name
Klass_name
Bar
Foo
quit
to_klass
to
c
quit
mappers.find{ |mapper| mapper[:from_klass] == from_klass && mapper[:to_klass] == to_klass }
mappers.find({}) { |mapper| mapper[:from_klass] == from_klass && mapper[:to_klass] == to_klass }
   25:       end
   24:         mapper[:from_klass] == from_klass && mapper[:to_klass] == to_klass
mappers.find({}) do |mapper|
mappers
c
n
from
to
n
from
to.class
to
c
to
c
to
c
to.class
to
quit
Karta.instance_variables
Karta.mapper_registry
Karta.instance_variables
Karta.instance_variable_get('@mapper_registry')
quit
to.class
to
to_klass
from_klass
quit
from_klassto_klass
from_klass
mapper_registry
quit
mapper.from_klass
quit
mapper
c
quit
Karta.map(from: 1, to: Array)
quit
Karta.map(from: 1, to: Array)
quit
to
from
quit
to.class
find_mapper_for(from: from, to: to.class)
quit
mapper.class_variable_get('@@to_klass')
mapper.class_variable_get('@@from_klass')
mapper.class_variable_get('@from_klass')
mapper
quit
klass_name.to_s.gsub('Mapper', '').split("To").map(&:constantize)
klass_name.to_s.gsub('Mapper', '').split("To")
klass_name.to_s.gsub('Mapper', '')
klass_name.gsub('Mapper', '')
klass_name.gsub('Mapper')
klass_name
quit
y
quit
base
klass_name
quit
namespace
quit
p
pp
ap _.sort
FooToBarMapper.new.methods
FooToBarMapper.new
c
mapping_methods
mapping_mehtods
quit
mapping_methods
quit
map_methods
quit
a
c
from_klass
quit
from_klass
up.inspect
quit
up
c
block.call
block.arguments
block.args
&block
block
